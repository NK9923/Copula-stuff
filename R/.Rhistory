set.seed(123)
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
library(data.table)
set.seed(123)
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
x
set.seed(123)
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
set.seed(123)
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
x
# GPD fits
fits <- f_FitGPDList(x)
#### Tail dependency
# Using Pedro's method.
### Functions ----
## GPD fit
f_FitGPD <- function( x, lower = NULL, min.obs = 150 ) {
x <- as.matrix(x)
if ( is.null(lower) ) {
lower <- ecdf(x)(head(sort(x), min.obs)[min.obs])
}
lower_quant <- quantile(x, lower)
excess <- x[x <= lower_quant]*(-1) - lower_quant*(-1)
if ( !all(excess >= 0) ) { stop("Support of the GPD is >= 0!") }
gpd_fit <- qrmtools::fit_GPD_MLE(x = excess, estimate.cov = F)
#fit.MOM <- qrmtools::fit_GPD_MOM(excess)
res <- list(
"Excess" = sort(excess),
"Shape" = gpd_fit$par[["shape"]],
"Scale" = gpd_fit$par[["scale"]],
"Threshold" = lower_quant
)
return(res)
}
f_FitGPDList <- function( x, lower = NULL, min.obs = 150 ) {
x <- as.matrix(x)
tickers <- colnames(x)
fits <- list(NULL)
fits <- lapply(1:length(tickers), function(i) {
loss_dist <- x[, tickers[i]]
f_FitGPD(x = x, lower = lower, min.obs = min.obs)
})
names(fits) <- paste0(colnames(x), "_fit")
return(fits)
}
f_FastpSPGPD <- function( x, fit) {
x <- as.matrix(x)
emp.cdf <- sort(x)
x <- cbind(x, seq_along(x))
shape <- fit$Shape
scale <- fit$Scale
u <- fit$Threshold
n_u <- length(fit$Excess)
n <- length(emp.cdf)
x.lower <- x[x[, 1] <= u,]
most.similar <- sapply(x.lower[, 1], function(x) {
which.min(abs(emp.cdf-x))
})
i <- ifelse(x.lower[, 1] < emp.cdf[most.similar], most.similar - 1, most.similar)
x.lower[, 1] <- (i - 0.5)/n
x.upper <- x[x[, 1] > u,]
x.upper[, 1] <- 1 - (n_u/n)*(1 + shape*(x.upper[, 1] - u)/scale)^(-1/shape)
prob <- rbind(x.lower, x.upper)
prob <- prob[order(prob[,2]), ]
prob[, 1]
return(prob[, 1])
}
## Empirical copulas
f_CopulasEmp <- function( x, fits) {
x <- as.matrix(x)
copula <- matrix( nrow = nrow(x), ncol = ncol(x) )
names <- colnames(x)
for ( i in 1:ncol(x) ) {
fit_i <- fits[[i]]
ss_i <- x[, i]
copula[, i] <- f_FastpSPGPD(x = ss_i, fit =  fit_i)
}
colnames(copula) <- names
return(copula)
}
f_FitGPDList(x)
# GPD fits
fits <- f_FitGPDList(x)
fits
x
f_CopulasEmp(x = x, fits = fits)
x <- as.matrix(x)
emp.cdf <- sort(x)
emp.cdf
x <- cbind(x, seq_along(x))
fit_i <- fits[[i]]
i = 1
fit_i <- fits[[i]]
ss_i <- x[, i]
copula[, i] <- f_FastpSPGPD(x = ss_i, fit =  fit_i)
x <- as.matrix(x)
copula <- matrix( nrow = nrow(x), ncol = ncol(x) )
names <- colnames(x)
fit_i <- fits[[i]]
ss_i <- x[, i]
copula[, i] <- f_FastpSPGPD(x = ss_i, fit =  fit_i)
copula
x <- as.matrix(x)
emp.cdf <- sort(x)
x <- cbind(x, seq_along(x))
shape <- fit$Shape
fit
fit <- fit_i
x <- as.matrix(x)
emp.cdf <- sort(x)
x <- cbind(x, seq_along(x))
x
x <- X[,1]
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
x <- x[,1]
x <- as.matrix(x)
emp.cdf <- sort(x)
x <- cbind(x, seq_along(x))
shape <- fit$Shape
scale <- fit$Scale
u <- fit$Threshold
n_u <- length(fit$Excess)
n <- length(emp.cdf)
x.lower <- x[x[, 1] <= u,]
most.similar <- sapply(x.lower[, 1], function(x) {
which.min(abs(emp.cdf-x))
})
shape
scale
u
n_u
n
x[x[, 1] <= u,]
x.lower
emp.cdf
emp.cdf
most.similar <- sapply(x.lower[, 1], function(x) {
which.min(abs(emp.cdf-x))
})
most.similar
emp.cdf
abs(emp.cdf-x)
seq_along(x)
x.lower[, 1]
x
most.similar
most.similar <- sapply(x.lower[, 1], function(x) {
which.min(abs(emp.cdf-x))
})
most.similar
i <- ifelse(x.lower[, 1] < emp.cdf[most.similar], most.similar - 1, most.similar)
x.lower[, 1] <- (i - 0.5)/n
x.lower
i <- ifelse(x.lower[, 1] < emp.cdf[most.similar], most.similar - 1, most.similar)
i
x.lower[, 1] <- (i - 0.5)/n
x.lower
x.upper <- x[x[, 1] > u,]
x.upper[, 1] <- 1 - (n_u/n)*(1 + shape*(x.upper[, 1] - u)/scale)^(-1/shape)
prob <- rbind(x.lower, x.upper)
x.upper
x.upper
prob
x.lower
x.upper
emp_cops
# GPD fits
fits <- f_FitGPDList(x)
# Empirical copulas
emp_cops <- f_CopulasEmp(x = x, fits = fits)
set.seed(123)
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
# GPD fits
fits <- f_FitGPDList(x)
# Empirical copulas
emp_cops <- f_CopulasEmp(x = x, fits = fits)
emp_cops
plot(emp_cops[,1], emp_cops[,2])
# Vine copulas
vine_cops <- rvinecopulib::vinecop(data = emp_cops, selcrit = "bic", cores = 4)
rVine_cops <- rvinecopulib::rvinecop(n = 10000, vinecop = vine_cops, qrng = T)
rVine_cops
lnorm
x <- data.table(X = rlnorm(1000), Y = rlnorm(1000))
set.seed(123)
x <- data.table(X = rlnorm(1000), Y = rlnorm(1000))
f_TailDep(x)
## Tail dependency
f_TailDep <- function(x) {
# GPD fits
fits <- f_FitGPDList(x)
# Empirical copulas
emp_cops <- f_CopulasEmp(x = x, fits = fits)
# Vine copulas
vine_cops <- rvinecopulib::vinecop(data = emp_cops, selcrit = "bic", cores = 4)
rVine_cops <- rvinecopulib::rvinecop(n = 10000, vinecop = vine_cops, qrng = T)
# tail dependency
res <- FRAPO::tdc(x = rVine_cops, method = "EmpTC")
return(res)
}
library(data.table)
set.seed(123)
x <- data.table(X = rlnorm(1000), Y = rlnorm(1000))
f_TailDep(x)
# GPD fits
fits <- f_FitGPDList(x)
# Empirical copulas
emp_cops <- f_CopulasEmp(x = x, fits = fits)
# Vine copulas
vine_cops <- rvinecopulib::vinecop(data = emp_cops, selcrit = "bic", cores = 4)
rVine_cops <- rvinecopulib::rvinecop(n = 10000, vinecop = vine_cops, qrng = T)
vine_cops
rVine_cops
plot(rVine_cops[,1], rVine_cops[,2])
plot(x[,1], x[,2])
x
x[,1]
x[,2]
plot(x[,1], x[,2])
plot(x[,1], x[,2], type = "p")
emp.cdf
n_u
x.lower
x
x.lower <- x[x[, 1] <= u,]
x
x[,1]
x = x[,1]
x.lower <- x[x[, 1] <= u,]
x
x <- as.matrix(x)
x
x[x[, 1] <= u,]
x <- cbind(x, seq_along(x))
x[x[, 1] <= u,]
x
x[, 1]
x[, 1] <= u
x <- as.matrix(x)
emp.cdf <- sort(x)
x <- cbind(x, seq_along(x))
emp.cdf <- sort(x)
x <- cbind(x, seq_along(x))
x <- data.table(X = rlnorm(1000), Y = rlnorm(1000))
set.seed(123)
x <- data.table(X = rlnorm(1000), Y = rlnorm(1000))
f_TailDep(x)
# GPD fits
fits <- f_FitGPDList(x)
# Empirical copulas
emp_cops <- f_CopulasEmp(x = x, fits = fits)
emp_cops
x
x <- as.matrix(x)
copula <- matrix( nrow = nrow(x), ncol = ncol(x) )
names <- colnames(x)
i = 1
fit_i <- fits[[i]]
ss_i <- x[, i]
x <- as.matrix(x)
emp.cdf <- sort(x)
x <- cbind(x, seq_along(x))
fit = fit_i
x <- as.matrix(x)
emp.cdf <- sort(x)
x <- cbind(x, seq_along(x))
shape <- fit$Shape
scale <- fit$Scale
u <- fit$Threshold
n_u <- length(fit$Excess)
n <- length(emp.cdf)
x.lower <- x[x[, 1] <= u,]
x.lower
x <- as.matrix(x)
emp.cdf <- sort(x)
x <- cbind(x, seq_along(x))
shape <- fit$Shape
x
x
x <- data.table(X = rlnorm(1000), Y = rlnorm(1000))
x <- x[,1]
x <- as.matrix(x)
emp.cdf <- sort(x)
x <- cbind(x, seq_along(x))
shape <- fit$Shape
scale <- fit$Scale
u <- fit$Threshold
n_u <- length(fit$Excess)
n <- length(emp.cdf)
x.lower <- x[x[, 1] <= u,]
u
n_u
n
x.lower
set.seed(123)
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
# GPD fits
fits <- f_FitGPDList(x)
# Empirical copulas
emp_cops <- f_CopulasEmp(x = x, fits = fits)
x <- as.matrix(x)
copula <- matrix( nrow = nrow(x), ncol = ncol(x) )
names <- colnames(x)
fit_i <- fits[[i]]
ss_i <- x[, i]
x <- x[,1]
x <- as.matrix(x)
emp.cdf <- sort(x)
x <- cbind(x, seq_along(x))
shape <- fit$Shape
scale <- fit$Scale
u <- fit$Threshold
n_u <- length(fit$Excess)
n <- length(emp.cdf)
x.lower <- x[x[, 1] <= u,]
x.lower
u
x.lower
u
fit
loss_dist <- x[, tickers[i]]
f_FitGPD(x = x, lower = lower, min.obs = min.obs)
# GPD fits
fits <- f_FitGPDList(x)
fits
set.seed(123)
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
# GPD fits
fits <- f_FitGPDList(x)
fits
set.seed(123)
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
# GPD fits
fits <- f_FitGPDList(x)
fits
# GPD fits
fits <- f_FitGPDList(x)
fits
x <- as.matrix(x)
if ( is.null(lower) ) {
lower <- ecdf(x)(head(sort(x), min.obs)[min.obs])
}
lower_quant <- quantile(x, lower)
excess <- x[x <= lower_quant]*(-1) - lower_quant*(-1)
lower = NULL
min.obs = 150
x <- as.matrix(x)
if ( is.null(lower) ) {
lower <- ecdf(x)(head(sort(x), min.obs)[min.obs])
}
lower_quant <- quantile(x, lower)
excess <- x[x <= lower_quant]*(-1) - lower_quant*(-1)
if ( !all(excess >= 0) ) { stop("Support of the GPD is >= 0!") }
gpd_fit <- qrmtools::fit_GPD_MLE(x = excess, estimate.cov = F)
gpd_fit
lower_quant
lower
lower
sort(x)
head(sort(x), min.obs)[min.obs]
min.obs
sort(x)
set.seed(123)
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
x
x <- as.matrix(x)
if ( is.null(lower) ) {
lower <- ecdf(x)(head(sort(x), min.obs)[min.obs])
}
lower
ecdf(x)
head(sort(x), min.obs)[min.obs]
head(sort(x), min.obs)
set.seed(123)
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
write.csv(x, "test.csv")
set.seed(123)
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
x <- as.matrix(x)
if ( is.null(lower) ) {
lower <- ecdf(x)(head(sort(x), min.obs)[min.obs])
}
lower_quant <- quantile(x, lower)
excess <- x[x <= lower_quant]*(-1) - lower_quant*(-1)
lower
sort(x)
View(x)
lower
x
head(sort(x), min.obs)
sort(x)
x <- x[,1]
x <- as.matrix(x)
if ( is.null(lower) ) {
lower <- ecdf(x)(head(sort(x), min.obs)[min.obs])
}
lower
ecdf(x)
head(sort(x), min.obs)
head(sort(x), min.obs)[min.obs]
ecdf(x)(head(sort(x), min.obs)[min.obs])
quantile(x, lower)
lower
lower <- ecdf(x)(head(sort(x), min.obs)[min.obs])
lower_quant <- quantile(x, lower)
lower_quant
excess <- x[x <= lower_quant]*(-1) - lower_quant*(-1)
if ( !all(excess >= 0) ) { stop("Support of the GPD is >= 0!") }
gpd_fit <- qrmtools::fit_GPD_MLE(x = excess, estimate.cov = F)
res <- list(
"Excess" = sort(excess),
"Shape" = gpd_fit$par[["shape"]],
"Scale" = gpd_fit$par[["scale"]],
"Threshold" = lower_quant
)
res
lower_quant
library(data.table)
set.seed(123)
x <- data.table(X = rnorm(1000), Y = rnorm(1000))
# GPD fits
fits <- f_FitGPDList(x)
fits
fits
x <- as.matrix(x)
copula <- matrix( nrow = nrow(x), ncol = ncol(x) )
names <- colnames(x)
fit_i <- fits[[i]]
ss_i <- x[, i]
x
i
ss_i <- x[, i]
ss_i
x = ss_i
fit =  fit_i
x <- as.matrix(x)
emp.cdf <- sort(x)
x <- cbind(x, seq_along(x))
shape <- fit$Shape
scale <- fit$Scale
u <- fit$Threshold
n_u <- length(fit$Excess)
n <- length(emp.cdf)
x.lower <- x[x[, 1] <= u,]
most.similar <- sapply(x.lower[, 1], function(x) {
which.min(abs(emp.cdf-x))
})
x.lower
u
scale
shape
u
x.lower
x[, 1]
x
x[, 1]
u
x.lower
x.upper
x[x[, 1] > u,]
abs(emp.cdf-x)
emp.cdf
x.lower
prob
most.similar <- sapply(x.lower[, 1], function(x) {
which.min(abs(emp.cdf-x))
})
most.similar
x.lower[, 1]
emp.cdf
i
n
n
most.similar <- sapply(x.lower[, 1], function(x) {
which.min(abs(emp.cdf-x))
})
i <- ifelse(x.lower[, 1] < emp.cdf[most.similar], most.similar - 1, most.similar)
x.lower[, 1] <- (i - 0.5)/n
x.lower
x.upper
x.upper <- x[x[, 1] > u,]
x.upper[, 1] <- 1 - (n_u/n)*(1 + shape*(x.upper[, 1] - u)/scale)^(-1/shape)
x.upper
shape
x.upper[, 1]
